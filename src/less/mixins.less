@import (reference, once) "variables";

.animate(@styles) {
	@styles();
	.stop() {
		animation-delay:0s;
		animation-duration:0s;
		transition-delay:0s;
		transition-duration:0s;
	}
	/* separate to single out invalid selector query */
	.still:not(.animate) & {
		.stop();
	}
	.still:not(.animate) {
		.stop();
	}
	&.still:not(.animate) {
		.stop();
	}
}

.background() {
	background-color:@primaryColor;
}
.border-color() {
	border-color:@ternaryColor;
}

.centerPosition(@position:absolute) {
	position:@position;
	top:50%;
	left:50%;
	transform:translate(-50%,-50%);
}

.fadeIn(@time:@fadeTime, @delay:0s) {
	.animate({
		animation+: fadeIn @time @delay both;
	});

	@keyframes fadeIn {
		from {
			opacity:0;
		}
		to {
			opacity:1;
		}
	}
}

.selectable() {
	.selected(@color:fade(softlight(@secondaryColor,@textColor),50%)) {
	 	background-color:@color;
	 	color:@primaryColor;
	}
	&:hover,&:focus,&:focus-within {
		background-color:fade(@secondaryColor,40%);
	}
}
.zebra(@color:fade(@ternaryColor,40%),@color2:lighten(spin(@color,30),40%)) {
	&:nth-child(even) {
		background-color:@color;
	}
	&:nth-child(odd) {
		background-color:@color2;
	}
}

.boxShadow(){
	box-shadow: 1em 1em .5em fade(darken(@ternaryColor,20%),40%);
}

.stripes(@color1:@secondaryColor,@color2:lighten(@color1,20%),@width: 100px,@angle: 45deg) {
	background-size: @width @width;
	background-image: linear-gradient(@angle, @color1 25%, @color2 25%, @color2 50%, @color1 50%, @color1 75%, @color2 75%, @color2);
	.stripes-animate(@time:2s)
	{
		.animate({
			animation+: stripes-animate @time linear infinite;
		});

		@keyframes stripes-animate {
			0% {
				background-position: 0 0;
			}
			100% {
				background-position: 95px 0;
			}
		}
	}
}

.textBorder(@color:@primaryColor, @blur:0px){
	text-shadow:  1px  1px @blur @color,
				  1px -1px @blur @color,
				 -1px  1px @blur @color,
				 -1px -1px @blur @color;
}

.tooltip(@attr:~"data-title",@direction:~"right",@distance:1em,@content:attr(@attr),@additions:{}) {
	.tooltip-fadeIn(@time:@fadeTime, @delay:0s) {
		&:hover::after {
			.fadeIn(@time,@delay);
		}
	}
	position:relative;
	&[@{attr}]:hover::after {
		content:@content;
		.background();
		color:@textColor;
		border:1px solid;
		.border-color();
		border-radius:1em;
		position:absolute;
		z-index:1;
		top:~"calc(100% + .5em)";
		@{direction}:@distance;
		padding:.5em;
		.boxShadow();
		white-space:pre;

		@additions();
	}
}
.display-table() {
	display:table;
	> * {
		display:table-row;
		> * {
			display:table-cell;
		}
	}
}
.spring(@time:@fadeTime, @delay:0s, @from:1, @to:1.5, @transform-before:~"", @transform-after:~"") {
	.animate({
		animation+: spring @time ease-in-out @delay infinite alternate;
	});

	@keyframes spring {
		from {
			transform:@transform-before @from @transform-after
		}
		to {
			transform:@transform-before @to @transform-after
		}
	}
}